ATTENDANCE.HTML
{% extends 'attendence_sys/main.html' %}
{% block content %}
{% for message in messages %}
{% if message.tags == 'error' %}
 <div class="alert alert-danger">
  {{ message }}
</div>
{% else %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endif %}
	{% endfor %}
{% if ta == False %}
<center><h1>Search Attendence</h1></center>
<div class="row">
	<div class="col">
		<div class="card card-body">

			<center>
				<form method="get">
					{{myFilter.form}}

		    		<button class="btn btn-primary" type="submit">Search</button>
				</form>
			</center>
		</div>
	</div>

                                                      

</div>
<br>
<div class="row">
	<div class="col-sm-12">
		<div class="card card-body">
			<table class="table table-sm">
				<tr>
					<th>Student ID</th>
					<th>Branch</th>
					<th>Year</th>
					<th>Section</th>
					<th>Period</th>
					<th>Status</th>
				</tr>
{% for attendence in attendences %}
<tr>
                    <td>{{ attendence.Student_ID }}</td>
					<td>{{ attendence.branch }}</td>
					<td>{{ attendence.year }}</td>
					<td>{{ attendence.section }}</td>
					<td>{{ attendence.period }}</td>
					<td>{{ attendence.status }}</td>
				</tr>
				{% endfor %}
</table>
		</div>
	</div>
</div>
{% else %}
	<center><h1>Present Period Attendence</h1></center>
	<div class="row">


<div class="col-sm-12">
			<div class="card card-body">
				<table class="table table-sm">
					<tr>
						<th>Student ID</th>
						<th>Branch</th>
						<th>Year</th>
						<th>Section</th>
						<th>Period</th>
						<th>Status</th>
					</tr>
{% for attendence in attendences %}
<tr>
<td>{{ attendence.Student_ID }}</td>
						<td>{{ attendence.branch }}</td>
						<td>{{ attendence.year }}</td>
						<td>{{ attendence.section }}</td>
						<td>{{ attendence.period }}</td>
						<td>{{ attendence.status }}</td>
					</tr>
					{% endfor %}
	</table>
			</div>
		</div>
	</div>
{% endif %}
{% endblock %}

Faculty form
{%  extends 'attendence_sys/main.html' %}
{% block content %}
<style>
	.profile-pic{
		max-width: 200px;
		max-height:200px;
		margin: 0 auto;
		border-radius: 50%;
	}
</style>
<br>
<div class="row">
	<div class="col-md-3">
		<div class="card card-body">
			<a class="btn btn-warning" href="{% url 'home' %}"> &#8592; Back to Home</a>
			<hr>
			<h3 style="text-align: center">Faculty Profile Pic</h3>
			<hr>
			<img class="img-responsive profile-pic" src="{{request.user.faculty.profile_pic.url}}" >
		</div>
	</div>
	<div class="col-md-9">
		<div class="card card-body">
		<form method="POST" action="" enctype="multipart/form-data">
				{% csrf_token %}
				{{form.as_p}}
	<input class="btn btn-primary" type="submit" name="Update Information">
			</form>		


</div>
</div>
</div>
{% endblock %}

Forms,py
from django.forms import ModelForm
from .models import *
class CreateStudentForm(ModelForm):
    class Meta:
        model = Student
        fields = '__all__'
    def __init__(self, *args, **kwargs):
        super(CreateStudentForm, self).__init__(*args, **kwargs)
        for visible in self.visible_fields():
            visible.field.widget.attrs['class'] = 'form-control'
    class FacultyForm(ModelForm):
    class Meta:
        model = Faculty
        fields = '__all__'
        exclude = ['user']
    def __init__(self, *args, **kwargs):
        super(FacultyForm, self).__init__(*args, **kwargs)
        for visible in self.visible_fields():
            visible.field.widget.attrs['class'] = 'form-control'    

Admin.py
from django.contrib import admin
from .models import *
# Register your models here.
admin.site.register(Faculty)
admin.site.register(Student)
admin.site.register(Attendence)
Filters.py
import django_filters
from .models import Attendence
class AttendenceFilter(django_filters.FilterSet):
    class Meta:
        model = Attendence
        fields = '__all__'
        exclude = ['Faculty_Name', 'status','time','branch','section']
Models.py
from django.db import models
from django.contrib.auth.models import User
def user_directory_path(instance, filename): 
    name, ext = filename.split(".")
    name = instance.firstname + instance.lastname
    filename = name +'.'+ ext 
    return 'Faculty_Images/{}'.format(filename)
class Faculty(models.Model):
    user = models.OneToOneField(User, null = True, blank = True, on_delete= models.CASCADE)
    firstname = models.CharField(max_length=200, null=True, blank=True)
    lastname = models.CharField(max_length=200, null=True, blank=True)
    phone = models.CharField(max_length=200, null=True)
    email = models.CharField(max_length=200, null=True)
    profile_pic = models.ImageField(upload_to=user_directory_path ,null=True, blank=True)

def __str__(self):
return str(self.firstname + " " + self.lastname)
def student_directory_path(instance, filename): 
    name, ext = filename.split(".")
    name = instance.registration_id # + "_" + instance.branch + "_" + instance.year + "_" + instance.section
    filename = name +'.'+ ext 
    return 'Student_Images/{}/{}/{}/{}'.format(instance.branch,instance.year,instance.section,filename)
class Student(models.Model):
    BRANCH = (('CSE','CSE'),
        ('IT','IT'),
        ('ECE','ECE'),
        ('CHEM','CHEM'),
        ('MECH','MECH'),
        ('EEE','EEE'),)
    YEAR = (('1','1'),
        ('2','2'),
        ('3','3'),
        ('4','4'),)
    SECTION = (('A','A'),
        ('B','B'),
        ('C','C'),)
firstname = models.CharField(max_length=200, null=True, blank=True)
    lastname = models.CharField(max_length=200, null=True, blank=True)
    registration_id = models.CharField(max_length=200, null=True)
    branch = models.CharField(max_length=100, null=True, choices=BRANCH)
    year = models.CharField(max_length=100, null=True, choices=YEAR)
    section = models.CharField(max_length=100, null=True, choices=SECTION)
    profile_pic = models.ImageField(upload_to=student_directory_path ,null=True, blank=True)
  return str(self.registration_id)
class Attendence(models.Model):
    # faculty = models.ForeignKey(Faculty, null = True, on_delete= models.SET_NULL)
    # student = models.ForeignKey(Student, null = True, on_delete= models.SET_NULL)
    Faculty_Name = models.CharField(max_length=200, null=True, blank=True)
    Student_ID = models.CharField(max_length=200, null=True, blank=True)
    date = models.DateField(auto_now_add = True, null = True)
    time = models.TimeField(auto_now_add=True, null = True)
    branch = models.CharField(max_length=200, null = True)
    year = models.CharField(max_length=200, null = True)
    section = models.CharField(max_length=200, null = True)
    period = models.CharField(max_length=200, null = True)
    status = models.CharField(max_length=200, null = True, default='Present')
     def __str__(self):
        return str(self.Student_ID + "_" + str(self.date)+ "_" + str(self.period))
